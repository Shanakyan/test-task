import { useEffect, useState, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  Character,
  fetchCharacters,
  toggleFavorite,
} from "../../features/charactersSlice";
import { CharacterCard } from "../../components/CharacterCard/CharacterCard";
import { AppDispatch, RootState } from "../../store/store";
import s from "./HomePage.module.css"; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å CSS –º–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
import { Spinner } from "../../components/Spinner/Spinner";
import defaultImage from "../../assets/defaultImage.jpg";

const ITEMS_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

function HomePage() {
  /* –¢–∏–ø —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */
  const [charactersListType, setCharactersListType] = useState<
    "All" | "Favorites"
  >("All");

  /* –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
  const [currentPage, setCurrentPage] = useState<number>(1);

  const navigate = useNavigate();
  const dispatch = useDispatch<AppDispatch>();

  const isLoading = useSelector((state: RootState) => state.isLoading);
  const characters = useSelector((state: RootState) => state.charactersState); // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ —Å—Ç–æ—Ä–∞
  const favorites = useSelector((state: RootState) => state.favoritesState); // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ —Å—Ç–æ—Ä–∞

  /* –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ */
  const charactersList = charactersListType === "All" ? characters : favorites;

  useEffect(() => {
    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—É—Å—Ç, —Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (characters.length === 0) {
      dispatch(fetchCharacters());
    }
  }, [characters.length, dispatch]);

  /* –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü */
  const totalPages = useMemo(() => {
    return Math.ceil(charactersList.length / ITEMS_PER_PAGE);
  }, [charactersList.length]);

  /* –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
  const currentCharacters = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    return charactersList.slice(startIndex, endIndex);
  }, [charactersList, currentPage]);

  /* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ */
  const handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setCharactersListType(e.target.value as "All" | "Favorites");
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  };

  /* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É */
  const handlePrevPage = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  /* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É */
  const handleNextPage = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  /* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É */
  const handlePageClick = (page: number) => {
    setCurrentPage(page);
  };

  /* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü */
  const pageNumbers = useMemo(() => {
    const pages = [];
    for (let i = 1; i <= totalPages; i++) {
      pages.push(i);
    }
    return pages;
  }, [totalPages]);

  return (
    <>
      <div className={s.filterBlock}>
        <select
          className={s.select}
          value={charactersListType}
          onChange={handleFilterChange}
        >
          <option value="All">All Characters</option>
          <option value="Favorites">Show Favorite Characters</option>
        </select>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
        <button
          className={s.createBtn}
          type="button"
          onClick={() => navigate("/createCharacter")}
        >
          Create New Characters
        </button>
      </div>

      <div className={s.cards__wrapper}>
        {currentCharacters.length === 0 &&
          charactersListType === "Favorites" && (
            <div className={s.noFavorites}>
              <p>–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ü§∑‚Äç‚ôÄÔ∏è</p>
            </div>
          )}

        {isLoading && <Spinner />}

        {currentCharacters.map((character: Character) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ª—é–±–∏–º—ã–º
          const isFavorite = favorites.some(
            (favorite: Character) => favorite.id === character.id
          );

          return (
            <CharacterCard
              key={character.id}
              id={character.id}
              name={character.name}
              actor={character.actor}
              alive={character.alive ? "Yes" : "No"}
              gender={character.gender}
              house={character.house}
              image={character.image || defaultImage}
              wandCore={character.wand.core}
              toggleFavorite={() => dispatch(toggleFavorite(character))}
              isFavorite={isFavorite}
              onClick={() =>
                navigate(`/cardInfoPage/${character.id}`, {
                  state: character,
                })
              }
            />
          );
        })}
      </div>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {totalPages > 1 && (
        <div className={s.pagination}>
          <button
            className={s.pagination__btn}
            onClick={handlePrevPage}
            disabled={currentPage === 1}
          >
            &laquo; –ù–∞–∑–∞–¥
          </button>

          {pageNumbers.map((number) => (
            <button
              key={number}
              className={`${s.pagination__btn} ${
                currentPage === number ? s.active : ""
              }`}
              onClick={() => handlePageClick(number)}
            >
              {number}
            </button>
          ))}

          <button
            className={s.pagination__btn}
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
          >
            –í–ø–µ—Ä–µ–¥ &raquo;
          </button>
        </div>
      )}
    </>
  );
}

export default HomePage;
